// M√≥dulo para an√°lise de altera√ß√µes no c√≥digo
import ora from 'ora';
import chalk from 'chalk';
import { analyzeChanges } from '../../dist/index.js';
import { ResultFormatter } from '../../dist/utils/formatter.js';

/**
 * Analisa as altera√ß√µes no reposit√≥rio
 * @param {Object} options - Op√ß√µes de configura√ß√£o
 * @param {string} options.base - Refer√™ncia base para compara√ß√£o
 * @param {string} options.head - Refer√™ncia para compara√ß√£o
 * @param {boolean} options.debug - Modo de depura√ß√£o
 * @returns {Promise<Object>} Resultado da an√°lise
 */
export async function analyzeRepo(options) {
  const spinner = ora('üîç Analisando altera√ß√µes...').start();
  console.log('‚ö†Ô∏è  Nota: Todos os arquivos ser√£o adicionados ao stage (git add .) para garantir an√°lise completa.');
  
  // Analisar as altera√ß√µes
  console.log(`Chamando analyzeChanges com base=${options.base}, head=${options.head}`);
  try {
    const result = await analyzeChanges(options.base, options.head);
    console.log('An√°lise conclu√≠da com sucesso');
    spinner.succeed('‚úÖ An√°lise conclu√≠da!');
    
    // Exibir o resultado da an√°lise
    const formatter = new ResultFormatter();
    const output = formatter.format(result);
    console.log(output);
    
    return result;
  } catch (error) {
    console.error('Erro durante analyzeChanges:', error);
    spinner.fail('‚ùå Erro na an√°lise');
    throw error;
  }
}

/**
 * Agrupa arquivos por tipo de altera√ß√£o
 * @param {Array} files - Lista de arquivos analisados
 * @returns {Object} Arquivos agrupados por tipo
 */
export function groupFilesByType(files) {
  const filesByType = {};
  
  for (const file of files) {
    if (!file.primaryType) {
      console.log(`Arquivo sem tipo prim√°rio: ${file.filePath}`);
      continue;
    }
    
    if (!filesByType[file.primaryType]) {
      filesByType[file.primaryType] = [];
    }
    
    filesByType[file.primaryType].push(file);
  }
  
  return filesByType;
}
