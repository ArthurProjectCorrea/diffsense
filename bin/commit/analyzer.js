import { analyzeChanges } from '../../dist/index.js';
import { ResultFormatter } from '../../dist/utils/formatter.js';
import { exec } from 'child_process';
import { promisify } from 'util';
import { createInterface } from 'readline';
import { promises as fs } from 'fs';
import chalk from 'chalk';

export const execPromise = promisify(exec);

// Fun√ß√£o que agrupa arquivos por tipo
export const groupFilesByType = (result) => {
  const filesByType = {};
  
  if (result && result.files) {
    // Ordenar as altera√ß√µes para garantir consist√™ncia
    const sortedChanges = [...result.files].sort((a, b) => {
      // Primeiro ordenar por tipo
      if (a.primaryType < b.primaryType) return -1;
      if (a.primaryType > b.primaryType) return 1;
      // Em seguida por nome de arquivo
      return (a.filePath || '').localeCompare(b.filePath || '');
    });
    
    // Agrupar por tipo
    sortedChanges.forEach(change => {
      if (change.primaryType && change.filePath) {
        const type = change.primaryType.trim();
        if (!filesByType[type]) {
          filesByType[type] = new Set();
        }
        // Usar Set para evitar duplicatas
        filesByType[type].add(change.filePath);
      } else if (change.filePath) {
        // Se n√£o tem tipo mas tem arquivo, classificar como feat
        if (!filesByType['feat']) {
          filesByType['feat'] = new Set();
        }
        filesByType['feat'].add(change.filePath);
      }
    });
  }
  
  return filesByType;
};

// Fun√ß√£o para analisar as altera√ß√µes
export const analyzeChangesAndFiles = async (options) => {
  console.log(chalk.blue('üîç Analisando altera√ß√µes...'));
  console.log(chalk.yellow('‚ö†Ô∏è  Nota: Todos os arquivos ser√£o adicionados ao stage (git add .) para garantir an√°lise completa.'));
  
  try {
    // Verificar status inicial
    const { stdout: initialStatus } = await execPromise('git status --porcelain');
    console.log(chalk.cyan(`\nüìä Status Git antes do add:\n${initialStatus || '(√Årea de trabalho limpa)'}`));
    
    // Executar git add para garantir que todos os arquivos s√£o considerados
    const { stdout: addOutput, stderr: addError } = await execPromise('git add .');
    if (addError) {
      console.warn(chalk.yellow(`‚ö†Ô∏è Aviso ao adicionar arquivos: ${addError}`));
    }
    
    // Verificar status ap√≥s git add
    const { stdout: afterAddStatus } = await execPromise('git status --porcelain');
    console.log(chalk.cyan(`\nüìä Status Git ap√≥s add:\n${afterAddStatus || '(√Årea de trabalho limpa)'}`));
  } catch (gitError) {
    console.error(chalk.red(`‚ùå Erro ao executar git add: ${gitError.message}`));
  }
  
  const result = await analyzeChanges(options.base, options.head);
  
  // Exibir resultado da an√°lise primeiro (padr√£o do analyzer.js)
  if (options.json) {
    // Sa√≠da em formato JSON
    console.log(JSON.stringify(result, null, 2));
  } else {
    // Sa√≠da formatada para o console
    const formatter = new ResultFormatter();
    const output = formatter.format(result);
    console.log(output);
  }

  return result;
};
