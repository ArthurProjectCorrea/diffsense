// Fun√ß√µes para an√°lise de altera√ß√µes no Git
import { analyzeChanges } from '../../dist/index.js';
import { ResultFormatter } from '../../dist/utils/formatter.js';
import { exec } from 'child_process';
import { promisify } from 'util';

const execPromise = promisify(exec);

// Fun√ß√£o para verificar status do Git e adicionar arquivos
export async function verificarStatus() {
  try {
    // Verificar status inicial
    const { stdout: initialStatus } = await execPromise('git status --porcelain');
    console.log(`\nüìä Status Git antes do add:\n${initialStatus || '(√Årea de trabalho limpa)'}`);
    
    // Executar git add para garantir que todos os arquivos s√£o considerados
    const { stdout: addOutput, stderr: addError } = await execPromise('git add .');
    if (addError) {
      console.warn(`‚ö†Ô∏è Aviso ao adicionar arquivos: ${addError}`);
    }
    
    // Verificar status ap√≥s git add
    const { stdout: afterAddStatus } = await execPromise('git status --porcelain');
    console.log(`\nüìä Status Git ap√≥s add:\n${afterAddStatus || '(√Årea de trabalho limpa)'}`);
  } catch (gitError) {
    console.error(`‚ùå Erro ao executar git add: ${gitError.message}`);
  }
}

// Fun√ß√£o para analisar altera√ß√µes
export async function analisarAlteracoes(options) {
  console.log('üîç Analisando altera√ß√µes...');
  console.log('‚ö†Ô∏è  Nota: Todos os arquivos ser√£o adicionados ao stage (git add .) para garantir an√°lise completa.');
  
  await verificarStatus();
  
  const result = await analyzeChanges(options.base, options.head);
  
  // Exibir resultado da an√°lise
  if (options.json) {
    // Sa√≠da em formato JSON
    console.log(JSON.stringify(result, null, 2));
  } else {
    // Sa√≠da formatada para o console
    const formatter = new ResultFormatter();
    const output = formatter.format(result);
    console.log(output);
  }
  
  return result;
}
