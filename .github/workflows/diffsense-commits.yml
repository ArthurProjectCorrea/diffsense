name: DiffSense Commit Analyzer

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to analyze'
        required: true
        default: 'main'

jobs:
  analyze-and-suggest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build DiffSense
      run: npm run build
      
    - name: Analyze PR changes with DiffSense
      id: diffsense-pr
      if: github.event_name == 'pull_request'
      run: |
        BASE_SHA=${{ github.event.pull_request.base.sha }}
        HEAD_SHA=${{ github.event.pull_request.head.sha }}
        
        echo "Analyzing PR changes between $BASE_SHA and $HEAD_SHA"
        
        # Executar o DiffSense para analisar as mudanças
        node dist/cli/index.js run --base $BASE_SHA --head $HEAD_SHA --format json | grep -o '{.*}' > diffsense-pr.json
        
        # Extrair tipos de mudanças e sugerir um commit semântico
        node -e "
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('diffsense-pr.json', 'utf8'));
          
          const changes = data.changes || [];
          
          // Classificar as mudanças
          const types = {
            feature: changes.filter(c => c.type.includes('FEATURE') || c.type.includes('ADD')),
            fix: changes.filter(c => c.type.includes('FIX') || c.type.includes('BUGFIX')),
            refactor: changes.filter(c => c.type.includes('REFACTOR')),
            docs: changes.filter(c => c.type.includes('DOCS')),
            test: changes.filter(c => c.type.includes('TEST')),
            chore: changes.filter(c => !c.type.includes('FEATURE') && !c.type.includes('ADD') && 
                                        !c.type.includes('FIX') && !c.type.includes('BUGFIX') && 
                                        !c.type.includes('REFACTOR') && !c.type.includes('DOCS') &&
                                        !c.type.includes('TEST'))
          };
          
          // Determinar o tipo primário de commit
          let commitType = 'chore';
          let commitScope = '';
          
          if (types.feature.length > 0) {
            commitType = 'feat';
            const mostImpactful = types.feature.sort((a, b) => b.impactScore - a.impactScore)[0];
            commitScope = mostImpactful.file.split('/')[0];
          } else if (types.fix.length > 0) {
            commitType = 'fix';
            const mostImpactful = types.fix.sort((a, b) => b.impactScore - a.impactScore)[0];
            commitScope = mostImpactful.file.split('/')[0];
          } else if (types.refactor.length > 0) {
            commitType = 'refactor';
            const mostImpactful = types.refactor.sort((a, b) => b.impactScore - a.impactScore)[0];
            commitScope = mostImpactful.file.split('/')[0];
          } else if (types.docs.length > 0) {
            commitType = 'docs';
            commitScope = types.docs[0].file.split('/')[0];
          } else if (types.test.length > 0) {
            commitType = 'test';
            commitScope = types.test[0].file.split('/')[0];
          }
          
          // Verificar mudanças breaking
          const breakingChanges = changes.filter(c => c.impactScore > 0.8);
          const isBreaking = breakingChanges.length > 0;
          
          // Gerar descrição
          let description = '';
          
          if (isBreaking) {
            const breakingDesc = breakingChanges.map(c => c.description || 
              \`Changes in \${c.file}\`).join(', ');
            description = \`BREAKING CHANGE: \${breakingDesc}\`;
          } else {
            const highImpactChanges = changes.filter(c => c.impactScore > 0.5);
            if (highImpactChanges.length > 0) {
              description = highImpactChanges.map(c => c.description || 
                \`Changes in \${c.file}\`).join(', ');
            } else {
              description = 'Various updates and improvements';
            }
          }
          
          // Formatar mensagem de commit
          const commitMsg = commitScope ? 
            \`\${commitType}(\${commitScope})\${isBreaking ? '!' : ''}: \${description}\` : 
            \`\${commitType}\${isBreaking ? '!' : ''}: \${description}\`;
            
          // Gerar o resumo completo
          let summary = \`## DiffSense Analysis Summary\n\n\`;
          summary += \`### Detected Changes:\n\n\`;
          summary += \`- Features: \${types.feature.length}\n\`;
          summary += \`- Fixes: \${types.fix.length}\n\`;
          summary += \`- Refactors: \${types.refactor.length}\n\`;
          summary += \`- Documentation: \${types.docs.length}\n\`;
          summary += \`- Tests: \${types.test.length}\n\`;
          summary += \`- Other: \${types.chore.length}\n\n\`;
          
          summary += \`### Suggested Semantic Commit:\n\n\`;
          summary += \`\`\`\n\${commitMsg}\n\`\`\`\n\n\`;
          
          if (breakingChanges.length > 0) {
            summary += \`### ⚠️ Breaking Changes Detected:\n\n\`;
            breakingChanges.forEach(c => {
              summary += \`- \${c.description || c.file}: Impact Score \${c.impactScore.toFixed(2)}\n\`;
            });
            summary += \`\n\`;
          }
          
          // Adicionar detalhes das mudanças de alto impacto
          const highImpact = changes.filter(c => c.impactScore > 0.5 && c.impactScore <= 0.8);
          if (highImpact.length > 0) {
            summary += \`### High Impact Changes:\n\n\`;
            highImpact.forEach(c => {
              summary += \`- \${c.type} in \`\`\${c.file}\`\`: \${c.description || 'No description'}\n\`;
              summary += \`  - Impact Score: \${c.impactScore.toFixed(2)}\n\`;
              summary += \`  - Affected: \${c.affectedEntities?.join(', ') || 'None'}\n\n\`;
            });
          }
          
          fs.writeFileSync('pr-summary.md', summary);
          fs.writeFileSync('commit-suggestion.txt', commitMsg);
        "
        
    - name: Comment on PR with analysis and commit suggestion
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('pr-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
          
    - name: Analyze branch changes
      id: diffsense-branch
      if: github.event_name == 'workflow_dispatch'
      run: |
        BASE_BRANCH="origin/${{ github.event.inputs.branch }}"
        CURRENT_SHA=$(git rev-parse HEAD)
        BASE_SHA=$(git merge-base $BASE_BRANCH $CURRENT_SHA)
        
        echo "Analyzing changes between $BASE_SHA and $CURRENT_SHA"
        
        # Executar o DiffSense para analisar as mudanças
        node dist/cli/index.js run --base $BASE_SHA --head $CURRENT_SHA --format json | grep -o '{.*}' > diffsense-branch.json
        
        # Criar um relatório das mudanças
        node -e "
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('diffsense-branch.json', 'utf8'));
          
          const changes = data.changes || [];
          const summary = \`## DiffSense Branch Analysis\n\n\`;
          summary += \`Total changes detected: \${changes.length}\n\n\`;
          
          if (changes.length > 0) {
            summary += \`### Changes by Impact:\n\n\`;
            
            const high = changes.filter(c => c.impactScore > 0.7);
            const medium = changes.filter(c => c.impactScore > 0.4 && c.impactScore <= 0.7);
            const low = changes.filter(c => c.impactScore <= 0.4);
            
            summary += \`- High impact: \${high.length}\n\`;
            summary += \`- Medium impact: \${medium.length}\n\`;
            summary += \`- Low impact: \${low.length}\n\n\`;
            
            if (high.length > 0) {
              summary += \`### High Impact Changes:\n\n\`;
              high.forEach(c => {
                summary += \`- \${c.type} in \`\`\${c.file}\`\`: \${c.description || 'No description'}\n\`;
                summary += \`  - Impact Score: \${c.impactScore.toFixed(2)}\n\n\`;
              });
            }
          }
          
          fs.writeFileSync('branch-analysis.md', summary);
        "
        
        cat branch-analysis.md

    - name: Upload DiffSense results
      uses: actions/upload-artifact@v3
      with:
        name: diffsense-analysis-results
        path: |
          diffsense-pr.json
          diffsense-branch.json
          pr-summary.md
          branch-analysis.md
        retention-days: 14
