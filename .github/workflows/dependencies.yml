name: Atualização de Dependências

on:
  schedule:
    # Executa semanalmente às segundas-feiras às 7:00
    - cron: '0 7 * * 1'
  
  # Permite execução manual do workflow
  workflow_dispatch:
    inputs:
      dependency-type:
        description: 'Tipo de dependência a atualizar'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - prod
          - dev
          - vuln

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Configurar Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      # Verificar se há vulnerabilidades de segurança nas dependências
      - name: Verificar vulnerabilidades
        id: audit
        continue-on-error: true
        run: |
          npm audit --json > audit-report.json || echo "Vulnerabilidades encontradas"
          if [ -s audit-report.json ]; then
            echo "has_vulns=true" >> $GITHUB_OUTPUT
          else
            echo "has_vulns=false" >> $GITHUB_OUTPUT
          fi
      
      # Preparar outputs para o job
      - name: Inicializar variáveis
        id: init
        run: |
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "branch_name=dependabot/npm_updates-$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          
      # Executar atualização de dependências com vulnerabilidades
      - name: Atualizar dependências com vulnerabilidades
        id: vuln_update
        if: ${{ inputs.dependency-type == 'vuln' || inputs.dependency-type == 'all' || steps.audit.outputs.has_vulns == 'true' }}
        run: |
          # Criar uma nova branch para as atualizações
          BRANCH_NAME="dependabot/npm_security_updates-$(date +'%Y%m%d')"
          git checkout -b $BRANCH_NAME
          
          # Executar npm audit fix
          if npm audit fix --force; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          else
            echo "Falha ao corrigir todas as vulnerabilidades automaticamente"
          fi
      
      # Atualizar dependências de produção
      - name: Atualizar dependências de produção
        id: prod_update
        if: ${{ inputs.dependency-type == 'prod' || inputs.dependency-type == 'all' }}
        run: |
          # Criar uma nova branch para as atualizações (se ainda não existir)
          if [ "${{ steps.vuln_update.outputs.has_changes }}" != "true" ]; then
            BRANCH_NAME="${{ steps.init.outputs.branch_name }}"
            git checkout -b $BRANCH_NAME
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          else
            BRANCH_NAME="${{ steps.vuln_update.outputs.branch_name }}"
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          fi
          
          # Atualizar dependências de produção
          if npx npm-check-updates -u --dep prod --target minor; then
            npm install
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      # Atualizar dependências de desenvolvimento
      - name: Atualizar dependências de desenvolvimento
        id: dev_update
        if: ${{ inputs.dependency-type == 'dev' || inputs.dependency-type == 'all' }}
        run: |
          # Usar a branch já criada ou criar uma nova
          if [ "${{ steps.vuln_update.outputs.has_changes }}" == "true" ]; then
            BRANCH_NAME="${{ steps.vuln_update.outputs.branch_name }}"
          elif [ "${{ steps.prod_update.outputs.has_changes }}" == "true" ]; then
            BRANCH_NAME="${{ steps.prod_update.outputs.branch_name }}"
          else
            BRANCH_NAME="${{ steps.init.outputs.branch_name }}"
            git checkout -b $BRANCH_NAME
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Atualizar dependências de desenvolvimento
          if npx npm-check-updates -u --dep dev --target minor; then
            npm install
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      # Determinar se houve alguma mudança
      - name: Verificar se houve mudanças
        id: check_changes
        run: |
          if [ "${{ steps.vuln_update.outputs.has_changes }}" == "true" ] || [ "${{ steps.prod_update.outputs.has_changes }}" == "true" ] || [ "${{ steps.dev_update.outputs.has_changes }}" == "true" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            if [ "${{ steps.vuln_update.outputs.branch_name }}" != "" ]; then
              echo "branch_name=${{ steps.vuln_update.outputs.branch_name }}" >> $GITHUB_OUTPUT
            elif [ "${{ steps.prod_update.outputs.branch_name }}" != "" ]; then
              echo "branch_name=${{ steps.prod_update.outputs.branch_name }}" >> $GITHUB_OUTPUT
            elif [ "${{ steps.dev_update.outputs.branch_name }}" != "" ]; then
              echo "branch_name=${{ steps.dev_update.outputs.branch_name }}" >> $GITHUB_OUTPUT
            else
              echo "branch_name=${{ steps.init.outputs.branch_name }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
      
      # Verificar se há mudanças e fazer commit
      - name: Commit das mudanças
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git add package.json package-lock.json
          git commit -m "build: atualiza dependências do projeto" -m "Atualização automática de dependências pelo GitHub Actions"
      
      # Executar os testes para garantir que as atualizações não quebrem nada
      - name: Executar testes
        if: steps.check_changes.outputs.has_changes == 'true'
        id: test
        continue-on-error: true
        run: |
          npm run lint
          npm run test:ci
          npm run build
          if [ $? -eq 0 ]; then
            echo "tests_passed=true" >> $GITHUB_OUTPUT
          else
            echo "tests_passed=false" >> $GITHUB_OUTPUT
          fi
      
      # Criar Pull Request com as mudanças
      - name: Criar Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "build: atualiza dependências do projeto"
          branch: ${{ steps.check_changes.outputs.branch_name }}
          delete-branch: true
          title: "build: atualiza dependências do projeto"
          body: |
            ## 🤖 Atualização automática de dependências
            
            Este PR foi gerado automaticamente pelo workflow de atualização de dependências.
            
            ### 📋 Alterações:
            
            ${{ steps.test.outcome == 'success' && '✅ Todos os testes passaram com as novas dependências.' || '⚠️ Os testes falharam com as novas dependências. Por favor, verifique antes de fazer merge.' }}
            ${{ steps.audit.outputs.has_vulns == 'true' && '🛡️ Este PR inclui correções para vulnerabilidades de segurança.' || '' }}
            
            <details>
              <summary>📦 Lista de dependências atualizadas</summary>
            
              ```
              $(git diff --unified=0 package.json | grep "^[+-]" | grep -v "^ [+-]" | grep -v "version\|name\|description")
              ```
            </details>
            
            ### ⚙️ Próximos passos:
            
            1. Revise as mudanças
            2. Verifique se todos os testes estão passando
            3. Faça merge do PR para aplicar as atualizações
          labels: |
            dependencies
            automated-pr
          assignees: ${{ github.repository_owner }}
          reviewers: ${{ github.repository_owner }}
      
      # Notificar sobre problemas nos testes
      - name: Notificar sobre falhas nos testes
        if: steps.check_changes.outputs.has_changes == 'true' && steps.test.outputs.tests_passed == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **Atenção**: Os testes falharam após atualizar as dependências. Revisão manual necessária antes do merge.'
            })
