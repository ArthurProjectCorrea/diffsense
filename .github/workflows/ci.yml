name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the workflow with debug logging'
        required: false
        default: false

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [18.x, 20.x]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint
      id: lint
      run: npm run lint
      continue-on-error: true
    
    - name: Auto-fix linting issues
      if: steps.lint.outcome == 'failure' && github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest'
      run: |
        npm run lint:fix
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add .
        git commit -m "auto: Fix linting issues" || echo "No changes to commit"
        git push || echo "Nothing to push"
    
    - name: Type check
      run: npm run check-types
    
    - name: Test
      id: test
      run: npm run test:ci
    
    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      run: npm run coverage
    
    - name: Upload coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
    
    - name: Build
      run: npm run build
      
    - name: Check package validity
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      run: npm run test:install
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.os }}-${{ matrix.node-version }}
        path: dist/
        if-no-files-found: error
        retention-days: 7
        
    - name: Check for outdated dependencies
      if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      run: |
        npm outdated || true
        
    - name: Run security audit
      if: matrix.os == 'ubuntu-latest'
      run: npm audit --audit-level=high || true

  diffsense-analyze:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build DiffSense
      run: npm run build
      
    - name: Analyze code changes with DiffSense
      id: diffsense
      run: |
        # Para PRs, comparamos com o branch de destino
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
        else
          # Para pushes, comparamos com o commit anterior
          BASE_SHA=$(git rev-parse HEAD^)
          HEAD_SHA=$(git rev-parse HEAD)
        fi
        
        echo "Analyzing changes between $BASE_SHA and $HEAD_SHA"
        
        # Executar o DiffSense para analisar as mudanças
        node dist/cli/index.js run --base $BASE_SHA --head $HEAD_SHA --format json | grep -o '{.*}' > diffsense-output.json
        
        # Criar um resumo das mudanças para o comentário
        echo "## DiffSense Analysis Summary" > summary.md
        echo "" >> summary.md
        echo "### Semantic Changes Detected:" >> summary.md
        node -e "
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('diffsense-output.json', 'utf8'));
          
          const changes = data.changes || [];
          const impactful = changes.filter(c => c.impactScore > 0.5);
          
          fs.appendFileSync('summary.md', 
            \`\n- Total changes: ${changes.length}\n\` + 
            \`- High impact changes: ${impactful.length}\n\n\`
          );
          
          if (impactful.length > 0) {
            fs.appendFileSync('summary.md', '### High Impact Changes:\n\n');
            impactful.forEach(c => {
              fs.appendFileSync('summary.md', 
                \`- ${c.type} in \`\`${c.file}\`\`: ${c.description || 'No description'}\n\` +
                \`  - Impact Score: ${c.impactScore.toFixed(2)}\n\` +
                \`  - Affected: ${c.affectedEntities?.join(', ') || 'None'}\n\n\`
              );
            });
          }
        "
        
        cat summary.md
    
    - name: Comment PR with DiffSense Analysis
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
    
    - name: Upload DiffSense results
      uses: actions/upload-artifact@v3
      with:
        name: diffsense-analysis
        path: diffsense-output.json
        retention-days: 14

  analyze:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  semantic-commit:
    runs-on: ubuntu-latest
    needs: [diffsense-analyze]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Download DiffSense analysis
      uses: actions/download-artifact@v3
      with:
        name: diffsense-analysis
        
    - name: Generate semantic commit message
      id: semantic-commit
      run: |
        # Gerar mensagem de commit baseada na análise do DiffSense
        node -e "
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('diffsense-output.json', 'utf8'));
          
          const changes = data.changes || [];
          const featureChanges = changes.filter(c => c.type.includes('FEATURE') || c.type.includes('ADD'));
          const fixChanges = changes.filter(c => c.type.includes('FIX') || c.type.includes('BUGFIX'));
          const refactorChanges = changes.filter(c => c.type.includes('REFACTOR'));
          const docsChanges = changes.filter(c => c.type.includes('DOCS'));
          
          let commitType = 'chore';
          let commitScope = '';
          
          if (featureChanges.length > 0) {
            commitType = 'feat';
            const mostImpactful = featureChanges.sort((a, b) => b.impactScore - a.impactScore)[0];
            commitScope = mostImpactful.file.split('/')[0];
          } else if (fixChanges.length > 0) {
            commitType = 'fix';
            const mostImpactful = fixChanges.sort((a, b) => b.impactScore - a.impactScore)[0];
            commitScope = mostImpactful.file.split('/')[0];
          } else if (refactorChanges.length > 0) {
            commitType = 'refactor';
            const mostImpactful = refactorChanges.sort((a, b) => b.impactScore - a.impactScore)[0];
            commitScope = mostImpactful.file.split('/')[0];
          } else if (docsChanges.length > 0) {
            commitType = 'docs';
            commitScope = docsChanges[0].file.split('/')[0];
          }
          
          // Criar descrição do commit
          let summary = '';
          let breakingChanges = changes.filter(c => c.impactScore > 0.8);
          
          if (breakingChanges.length > 0) {
            const breakingDesc = breakingChanges.map(c => c.description || 
              \`Changes in \${c.file}\`).join(', ');
            summary = \`BREAKING CHANGE: \${breakingDesc}\`;
          } else {
            const highImpactChanges = changes.filter(c => c.impactScore > 0.5);
            if (highImpactChanges.length > 0) {
              summary = highImpactChanges.map(c => c.description || 
                \`Changes in \${c.file}\`).join(', ');
            } else {
              summary = 'Various updates and improvements';
            }
          }
          
          const commitMsg = commitScope ? 
            \`\${commitType}(\${commitScope}): \${summary}\` : 
            \`\${commitType}: \${summary}\`;
            
          fs.writeFileSync('commit-message.txt', commitMsg);
          console.log(\`Generated commit message: \${commitMsg}\`);
        "
        
        COMMIT_MSG=$(cat commit-message.txt)
        echo "commit-message=$COMMIT_MSG" >> $GITHUB_OUTPUT
        
    - name: Create new semantic commit
      if: github.event_name == 'push'
      run: |
        # Se houver alterações desde o último commit, crie um novo commit
        git config --global user.name 'DiffSense Bot'
        git config --global user.email 'diffsense-bot@noreply.github.com'
        
        # Verificar se há alterações não commitadas
        if [[ -n "$(git status --porcelain)" ]]; then
          git add .
          git commit -m "${{ steps.semantic-commit.outputs.commit-message }}"
          git push
          echo "Created semantic commit"
        else
          echo "No changes to commit"
        fi
